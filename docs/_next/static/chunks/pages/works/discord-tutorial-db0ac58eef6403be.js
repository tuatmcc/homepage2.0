(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[77],{3745:function(n,e,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/works/discord-tutorial",function(){return s(8282)}])},8282:function(n,e,s){"use strict";s.r(e),s.d(e,{meta:function(){return l}});var r=s(5893),c=s(1151),i=s(5675),d=s.n(i);let l={title:"Discord Bot チュートリアル"};function o(n){let e=Object.assign({p:"p",h1:"h1",h2:"h2",a:"a",em:"em",strong:"strong",ul:"ul",li:"li",code:"code",pre:"pre",h3:"h3",ol:"ol",img:"img",h4:"h4"},(0,c.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.p,{children:"こんにちは。B3 の Arc です。2022 年 2 月 18 日に部内で Discord Bot の開発チュートリアルを行いました。当時の資料を元に加筆・修正を加えた物を公開してみます。"}),"\n",(0,r.jsx)(e.h1,{children:"近頃の Discord Bot 界隈"}),"\n",(0,r.jsx)(e.p,{children:"最初に、近頃の Discord Bot 開発者界隈を取り巻く状況について軽く触れておきます。"}),"\n",(0,r.jsx)(e.h2,{children:"むかし"}),"\n",(0,r.jsxs)(e.p,{children:["昔は Bot 開発用の 2 大ライブラリとして、Python 用の",(0,r.jsx)(e.a,{href:"https://discordpy.readthedocs.io/en/latest/",children:"discord.py"}),"と Node.js 用の",(0,r.jsx)(e.a,{href:"https://discord.js.org/",children:"discord.js"}),"がありました。"]}),"\n",(0,r.jsx)(e.h2,{children:"2021 年 8 月 28 日"}),"\n",(0,r.jsxs)(e.p,{children:["この日に discord.py の開発終了が",(0,r.jsx)(e.a,{href:"https://gist.github.com/Rapptz/4a2f62751b9600a31a0d3c78100287f1",children:"アナウンスされました"}),"。Discord 公式とのトラブルがあったようです(詳しくはググってね)。後述しますが、",(0,r.jsx)(e.em,{children:"現在は開発が再開されたようです。"})]}),"\n",(0,r.jsx)(e.p,{children:"これにより、Discord 公式の REST API の仕様変更などに対応できなくなった discord.py 製 bot は死ぬ運命となりました(結果的にそうならなかったけど)。また、discord.py の後継を名乗るプロジェクトが林立する事態となりました。"}),"\n",(0,r.jsx)(e.p,{children:"Python 界隈がこの有様(だった)ので、このチュートリアルでは discord.js を使っていきます。"}),"\n",(0,r.jsx)(e.h2,{children:"2022 年 3 月 6 日"}),"\n",(0,r.jsxs)(e.p,{children:["……と思っていたら 3 月 6 日に discord.py の開発",(0,r.jsx)(e.strong,{children:"再開"}),"が",(0,r.jsx)(e.a,{href:"https://gist.github.com/Rapptz/c4324f17a80c94776832430007ad40e6",children:"アナウンスされました"}),"。 ~~何が何だか分からん~~ 再び 2 大ライブラリ時代に戻るんじゃないかなと思っています。たぶん……"]}),"\n",(0,r.jsx)(e.h1,{children:"環境構築・初期設定"}),"\n",(0,r.jsx)(e.p,{children:"この章では、Discord Bot を作るための環境構築・初期設定を行います。"}),"\n",(0,r.jsx)(e.h2,{children:"用語集"}),"\n",(0,r.jsx)(e.p,{children:"初めに、基本的な用語について説明しておきます。"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Node.js"}),"\n",(0,r.jsx)(e.li,{children:"サーバーサイド JavaScript 環境(ブラウザではなくサーバー上で JS を動かすための環境)の一種です。Discord Bot は Node.js 上で動きます。"}),"\n",(0,r.jsxs)(e.li,{children:["パッケージマネージャとして",(0,r.jsx)(e.code,{children:"npm"}),"という物を使います。"]}),"\n",(0,r.jsx)(e.li,{children:"最新の discord.js(v13)を使うためには、Node v16.6.0 以降が必要です。"}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://nodejs.org/ja/",children:"公式サイト"})}),"\n",(0,r.jsx)(e.li,{children:"TypeScript"}),"\n",(0,r.jsx)(e.li,{children:"JavaScript を静的型付けライクに拡張した言語です。静的型付け最高！"}),"\n",(0,r.jsxs)(e.li,{children:["TypeScript は直接実行することができないため、基本的には",(0,r.jsx)(e.code,{children:"tsc"}),"というコンパイラで JavaScript に変換してから実行します。"]}),"\n",(0,r.jsx)(e.li,{children:"文法は C や Java などに近い感じです。"}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://www.typescriptlang.org/",children:"公式サイト"})}),"\n"]}),"\n",(0,r.jsx)(e.h2,{children:"Node.js のインストール"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"https://nodejs.org/ja/download/",children:"ダウンロードページ"}),"から、Node.js の LTS 版をダウンロード・インストールしてください。"]}),"\n",(0,r.jsxs)(e.p,{children:["ターミナルで",(0,r.jsx)(e.code,{children:"node --version"}),"を実行した際、",(0,r.jsx)(e.code,{children:"v16.14.0"}),"のように表示されていればインストール成功です。"]}),"\n",(0,r.jsx)(e.h2,{children:"プロジェクトディレクトリの作成"}),"\n",(0,r.jsx)(e.p,{children:"適当な名前のディレクトリを作ってください。"}),"\n",(0,r.jsxs)(e.p,{children:["次に、ターミナルでディレクトリに移動し、",(0,r.jsx)(e.code,{children:"npm init"}),"を実行してください。色々聞かれますが、とりあえず全て Enter を押せばいいです。"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"package.json"}),"が作成されていることを確認してください。"]}),"\n",(0,r.jsx)(e.h2,{children:"パッケージのインストール"}),"\n",(0,r.jsx)(e.p,{children:"開発に必要なパッケージをインストールします。次のコマンドを実行してください。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"npm install --save discord.js dotenv typescript @types/node@16 ts-node tsconfig-paths\n"})}),"\n",(0,r.jsx)(e.h2,{children:"TypeScript の設定"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"npx tsc --init"}),"を実行してください。",(0,r.jsx)(e.code,{children:"tsconfig.json"}),"が生成されれば成功です。"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"tsconfig.json"}),"には、TypeScript のコンパイラ(TSC)の設定情報が含まれています。"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"tsconfig.json"}),"には設定項目が大量にありますが、中身については省略します。",(0,r.jsx)(e.code,{children:"baseUrl"}),"の項目だけ次のように変えてください。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsonc",children:'{\r\n  // ...\r\n  "baseUrl": "./src"\r\n  // ...\r\n}\n'})}),"\n",(0,r.jsx)(e.h2,{children:"スクリプトの設定"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"package.json"}),"の",(0,r.jsx)(e.code,{children:'"scripts"'}),"の箇所を次のように編集してください。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsonc",children:'{\r\n  // ...\r\n  "scripts": {\r\n    "start": "ts-node --files -r tsconfig-paths/register src/index.ts"\r\n  }\r\n  // ...\r\n}\n'})}),"\n",(0,r.jsxs)(e.p,{children:["これにより、",(0,r.jsx)(e.code,{children:"npm start"}),"で",(0,r.jsx)(e.code,{children:"npx ts-node --files -r tsconfig-paths/register src/index.ts"}),"を実行できるようになりました。"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"ts-node"}),"は、",(0,r.jsx)(e.code,{children:".ts"}),"ファイルを事前コンパイル無しで直接実行するためのパッケージです(正確には JIT コンパイルしているようです)。TypeScript のコードを走らせるには「tsc でコンパイル」→「Node で js を実行」 の 2 ステップを要していましたが、",(0,r.jsx)(e.code,{children:"ts-node"}),"を使うことで 1 ステップに抑えることができます。"]}),"\n",(0,r.jsxs)(e.p,{children:["いろいろ引数がついていますが、ここでは説明を省略します。気になる方は",(0,r.jsx)(e.code,{children:"tsconfig-paths"}),"などで検索してください。"]}),"\n",(0,r.jsx)(e.h2,{children:"Hello World"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"src"}),"ディレクトリを作成し、その中に",(0,r.jsx)(e.code,{children:"index.ts"}),"を作成してください。"]}),"\n",(0,r.jsx)(e.p,{children:"そして、次のコードをコピペしてください。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"console.log('Hello World!')\n"})}),"\n",(0,r.jsxs)(e.p,{children:["最後に、プロジェクトルートに居る状態で",(0,r.jsx)(e.code,{children:"npm start"}),"を実行してください。",(0,r.jsx)(e.code,{children:"Hello World!"}),"と表示されれば成功です！"]}),"\n",(0,r.jsx)(e.h1,{children:"Bot の登録・ログイン"}),"\n",(0,r.jsx)(e.p,{children:"この章では、Discord Bot をサーバーに追加した後、Bot をサーバーにログインさせます。"}),"\n",(0,r.jsxs)(e.p,{children:["概ね",(0,r.jsx)(e.a,{href:"https://guide.discordjs-japan.org/",children:"Discord.js Guide"})," v12 版に沿っていますが、現行の v13 に合わせて記述を変更している箇所もあります。"]}),"\n",(0,r.jsx)(e.h2,{children:"Bot をサーバーに追加する"}),"\n",(0,r.jsx)(e.p,{children:"Bot をサーバーに追加していきます。最初にテスト用のサーバーを立てておいてください。"}),"\n",(0,r.jsx)(e.h3,{children:"Bot の登録"}),"\n",(0,r.jsx)(e.p,{children:"まずは Bot を Discord に登録します。"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["Discord にログインした状態で、Discord Developer Portal の",(0,r.jsx)(e.a,{href:"https://discord.com/developers/applications/",children:"Application"}),"ページに移動してください。"]}),"\n",(0,r.jsxs)(e.li,{children:["右上の",(0,r.jsx)(e.code,{children:"New Application"}),"をクリックして、いい感じの名前をつけて",(0,r.jsx)(e.code,{children:"Create"}),"してください。"]}),"\n"]}),"\n",(0,r.jsx)(d(),{alt:"image",src:"/works/discord-tutorial/create_app.png"}),"\n",(0,r.jsxs)(e.ol,{start:"3",children:["\n",(0,r.jsxs)(e.li,{children:["左のメニューから",(0,r.jsx)(e.code,{children:"Bot"}),"をクリックして、",(0,r.jsx)(e.code,{children:"Add Bot -> Yes, do it!"}),"をクリックしてください。",(0,r.jsx)(e.code,{children:"A wild bot has appeared!"}),"みたいなメッセージが表示されれば OK です。"]}),"\n"]}),"\n",(0,r.jsx)(d(),{alt:"image",src:"/works/discord-tutorial/add_bot.png"}),"\n",(0,r.jsx)(e.h3,{children:"Bot をサーバーに招待"}),"\n",(0,r.jsx)(e.p,{children:"次に、Bot をサーバーに招待します。"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["左メニューから",(0,r.jsx)(e.code,{children:"OAuth2 -> URL Generator"}),"を開いてください。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"SCOPES"}),"の中の",(0,r.jsx)(e.code,{children:"bot"}),", ",(0,r.jsx)(e.code,{children:"applications.commands"}),"にチェックを入れてください。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"BOT PERMISSIONS"}),"の中の",(0,r.jsx)(e.code,{children:"Send Messages"}),"にチェックを入れてください。これにより、Bot にメッセージ送信権限が付与されます。他の権限が必要な場合は適宜チェックを増やしてください。"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:"/works/discord-tutorial/permission.png",alt:"img"})}),"\n",(0,r.jsxs)(e.ol,{start:"4",children:["\n",(0,r.jsxs)(e.li,{children:["下の方にある",(0,r.jsx)(e.code,{children:"Generated URL"}),"をコピーして、Web ブラウザに貼り付けてください。事前に作成したサーバーを選択して、「はい」などのボタンを押してください。"]}),"\n",(0,r.jsx)(e.li,{children:"Discord クライアント上で、サーバーに Bot が追加されたことを確認してください。"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{children:"Bot をサーバーにログインさせる"}),"\n",(0,r.jsx)(e.h3,{children:"環境変数と dotenv"}),"\n",(0,r.jsx)(e.p,{children:"これから Bot をサーバーにログインさせますが、その前に環境変数について説明しておきます。"}),"\n",(0,r.jsxs)(e.p,{children:["Bot をログインさせる際には「トークン」という値が必要になります。この値が外部に流出した場合、他の人が Bot をサーバーにログインさせて、スパムメッセージを送信するなどの悪事を働くことができてしまいます。このため、トークンはソースコードに",(0,r.jsx)(e.strong,{children:"埋め込まずに"}),"管理する必要があります(トークンを埋め込んだソースコードを Git に Push したら外部流出したことになります)。"]}),"\n",(0,r.jsxs)(e.p,{children:["このような機密情報は、実行環境の",(0,r.jsx)(e.strong,{children:"環境変数"}),"に設定して、ソースコードから環境変数を読み込む必要があります。しかし、環境変数を設定するのは割とだるいです。"]}),"\n",(0,r.jsxs)(e.p,{children:["Node では、実行時に",(0,r.jsx)(e.code,{children:".env"}),"というファイルから環境変数を読み込んで設定する",(0,r.jsx)(e.code,{children:"dotenv"}),"というモジュールがあります。実はこのモジュールは前章でインストールしていました。",(0,r.jsx)(e.code,{children:".env"}),"ファイルを",(0,r.jsx)(e.code,{children:".gitignore"}),"に設定することで、機密情報を安全に、便利に扱うことができます。"]}),"\n",(0,r.jsxs)(e.p,{children:["トークンを",(0,r.jsx)(e.code,{children:".env"}),"ファイルに保存しておきましょう。",(0,r.jsx)(e.code,{children:".env"}),"をルートディレクトリに作成して、次の内容を書き込んでください。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"TOKEN=<Botのトークン>\n"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"<Botのトークン>"}),"の箇所を実際の値で置き換えてください。Bot のトークンは次のようにして得ることができます。"]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["Developer Portal から前節で作成したアプリケーションを選択し、左メニューの",(0,r.jsx)(e.code,{children:"Bot"}),"を選択します。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"TOKEN"}),"という所に",(0,r.jsx)(e.code,{children:"Copy"}),"ボタンがあるのでクリックしてください。トークンがクリップボードにコピーされます。"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{children:"ログイン処理の実装"}),"\n",(0,r.jsx)(e.p,{children:"Bot をサーバーにログインさせる処理を書いていきます。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"// 1: インポート\r\nimport * as dotenv from 'dotenv'\r\nimport { Client, ClientOptions } from 'discord.js'\r\n\r\n// 2: .envを読み込み、環境変数に登録\r\ndotenv.config()\r\n\r\n// 3: クライアントを初期化\r\nconst clientOptions: ClientOptions = {\r\n  intents: ['GUILD_MESSAGES', 'GUILDS'],\r\n}\r\nconst client = new Client(clientOptions)\r\n\r\n// 4: ログイン完了時に実行するコールバック関数を登録\r\nclient.once('ready', () => {\r\n  console.log(\"I'm  ready!\")\r\n})\r\n\r\n// 5: ログイン\r\nclient.login(process.env.TOKEN)\n"})}),"\n",(0,r.jsx)(e.p,{children:"コードの中身を説明していきます。"}),"\n",(0,r.jsx)(e.h4,{children:"インポート"}),"\n",(0,r.jsx)(e.p,{children:"使用するクラスなどをインポートします。"}),"\n",(0,r.jsx)(e.h4,{children:".env を読み込み、環境変数に登録"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:".env"}),"を読み込んで、環境変数に登録します。環境変数へは",(0,r.jsx)(e.code,{children:"process.env.<変数名>"}),"でアクセスすることができます。"]}),"\n",(0,r.jsx)(e.h4,{children:"クライアントを初期化"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"v12"}),"以前と異なり、現行の",(0,r.jsx)(e.code,{children:"v13"}),"では",(0,r.jsx)(e.code,{children:"ClientOptions"}),"が必須になっています。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"ClientOptions"}),"の",(0,r.jsx)(e.code,{children:"intents"}),"で、どのイベントを Bot が受信するかを制御します。ここでは上記 2 つを指定しておけば良いでしょう。"]}),"\n",(0,r.jsx)(e.li,{children:"最後にクライアントのインスタンスを作成します。"}),"\n"]}),"\n",(0,r.jsx)(e.h4,{children:"ログイン完了時に実行するコールバック関数を登録"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["ログイン完了時に",(0,r.jsx)(e.code,{children:"ready"}),"イベントが発火されます。その時に実行する関数(コールバック関数)を登録しておきます。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"()=>{...}"}),"という表記は、JS・TS 特有の「アロー関数」という物です。(詳しくはググってね)"]}),"\n"]}),"\n",(0,r.jsx)(e.h4,{children:"ログイン"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["環境変数",(0,r.jsx)(e.code,{children:"TOKEN"}),"の値を引数にしてログインします。"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{children:"実行してみる"}),"\n",(0,r.jsx)(e.p,{children:"ここまで書けたら実際に実行してみましょう。"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"npm start"}),"を実行して数秒待ってください。次のことが確認できれば成功です！"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["コンソールに",(0,r.jsx)(e.code,{children:"I'm ready!"}),"と表示される。"]}),"\n",(0,r.jsx)(e.li,{children:"Discord アプリ上で、登録した Bot がオンラインになっている。"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"確認できたら、Ctrl+C などで Bot を止めておいてください。"}),"\n",(0,r.jsx)(e.h1,{children:"スラッシュコマンド"}),"\n",(0,r.jsx)(e.p,{children:"この章では、スラッシュコマンドの実装を行います。"}),"\n",(0,r.jsxs)(e.p,{children:["この記事を参考にしています: ",(0,r.jsx)(e.a,{href:"https://qiita.com/gaato/items/55b32bc4777905ac162a",children:"discord.js でスラッシュコマンド（Slash commands）を使う - Qiita"})]}),"\n",(0,r.jsx)(e.h2,{children:"2 種類のスラッシュコマンド"}),"\n",(0,r.jsx)(e.p,{children:"スラッシュコマンドには「ギルドコマンド」と「グローバルコマンド」の 2 種類があります。"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"ギルドコマンド: 特定のサーバーを指定して登録するコマンド。"}),"\n",(0,r.jsx)(e.li,{children:"グローバルコマンド: Bot が参加している全てのサーバーに登録されるコマンド。"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"グローバルコマンドは、登録後実際に使えるようになるまで 1 時間ほどかかるようです。このため、本チュートリアルではギルドコマンドを使用します。"}),"\n",(0,r.jsx)(e.h2,{children:"環境変数の設定"}),"\n",(0,r.jsxs)(e.p,{children:["ギルドコマンドを登録するためには、対象サーバーの ID が必要です。",(0,r.jsx)(e.code,{children:".env"}),"に保存しておきます。"]}),"\n",(0,r.jsx)(e.p,{children:"サーバー ID は次の方法で取得することができます。"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"Discord アプリの設定画面を開き、「詳細設定」の「開発者モード」をオンにしておきます。"}),"\n"]}),"\n",(0,r.jsx)(d(),{alt:"",src:"/works/discord-tutorial/devmode.png"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"サーバーアイコン上で右クリックして、「ID をコピー」を選択します。サーバー ID がクリップボードにコピーされます。"}),"\n"]}),"\n",(0,r.jsx)(d(),{alt:"",src:"/works/discord-tutorial/copy_server_id.png"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:".env"}),"に次の項目を追記してください。",(0,r.jsx)(e.code,{children:"<サーバーID>"}),"は実際の値に置き換えてください。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"SERVER_ID=<サーバーID>\n"})}),"\n",(0,r.jsx)(e.h2,{children:"シンプルなコマンド"}),"\n",(0,r.jsxs)(e.p,{children:["まず、",(0,r.jsx)(e.code,{children:"pong"}),"というメッセージを送信するだけのシンプルなコマンド",(0,r.jsx)(e.code,{children:"/ping"}),"を作成してみます。"]}),"\n",(0,r.jsx)(e.h3,{children:"環境変数の型定義を記述する"}),"\n",(0,r.jsx)(e.p,{children:"環境変数の型定義ファイルを作っておかないと後々面倒なので、ここで作ってしまいます。"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"src"}),"に",(0,r.jsx)(e.code,{children:"@types"}),"ディレクトリを作成して、中に",(0,r.jsx)(e.code,{children:"global.d.ts"}),"を作り、以下の内容を入力してください。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"declare namespace NodeJS {\r\n  interface ProcessEnv {\r\n    readonly TOKEN: string\r\n    readonly SERVER_ID: string\r\n  }\r\n}\n"})}),"\n",(0,r.jsx)(e.h3,{children:"コマンドを実装する"}),"\n",(0,r.jsxs)(e.p,{children:["実際にコマンドを作っていきます。次のコードを参考にして、",(0,r.jsx)(e.code,{children:"ready"}),"イベントのコールバックを編集し、",(0,r.jsx)(e.code,{children:"interactionCreate"}),"イベントのコールバックを追加してください。",(0,r.jsx)(e.code,{children:"async"}),"キーワードが新しく加わっていることに注意してください。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"import { ApplicationCommandData, Client, ClientOptions } from 'discord.js' // インポート部分が変わっています\r\n\r\n// ...\r\n\r\n// ログイン完了時に実行するコールバック関数を登録\r\nclient.once('ready', async () => {\r\n  const commands: ApplicationCommandData[] = [\r\n    {\r\n      name: 'ping',\r\n      description: 'pongと返します。',\r\n    },\r\n  ]\r\n  await client.application?.commands.set(commands, process.env.SERVER_ID)\r\n\r\n  console.log(\"I'm  ready!\")\r\n})\r\n\r\n// コマンド受信時のコールバック関数を登録\r\nclient.on('interactionCreate', async (interaction) => {\r\n  if (!interaction.isCommand()) {\r\n    return\r\n  }\r\n  if (interaction.commandName === 'ping') {\r\n    // pingコマンドが来たら:\r\n    await interaction.reply('pong') // pongとreplyする\r\n  }\r\n})\n"})}),"\n",(0,r.jsxs)(e.p,{children:["書けたら",(0,r.jsx)(e.code,{children:"npm start"}),"して、アプリ上でコマンドを使えるかどうか確認してみましょう。"]}),"\n",(0,r.jsx)(e.h2,{children:"引数付きコマンド"}),"\n",(0,r.jsxs)(e.p,{children:["引数を受け取るコマンドを作っていきます。ここでは、引数をそのまま出力する",(0,r.jsx)(e.code,{children:"echo"}),"コマンドを作っていきます。"]}),"\n",(0,r.jsx)(e.h3,{children:"コマンドの登録"}),"\n",(0,r.jsxs)(e.p,{children:["次のコードを参考にして、",(0,r.jsx)(e.code,{children:"commands"}),"に要素を追加してください。引数は",(0,r.jsx)(e.code,{children:"options"}),"プロパティで設定します。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"const commands: ApplicationCommandData[] = [\r\n  {\r\n    name: 'ping',\r\n    description: 'pongと返します。',\r\n  },\r\n  {\r\n    name: 'echo',\r\n    description: '入力された文字をそのまま返します。',\r\n    options: [\r\n      {\r\n        type: 'STRING',\r\n        name: 'value',\r\n        description: '文字列',\r\n        required: true,\r\n      },\r\n    ],\r\n  },\r\n]\n"})}),"\n",(0,r.jsx)(e.h3,{children:"コマンドの中身を実装"}),"\n",(0,r.jsxs)(e.p,{children:["次のコードを参考にして、コマンドの中身を実装してください。引数は",(0,r.jsx)(e.code,{children:"interaction.options.getString()"}),"などで受け取ることができます。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"if (interaction.commandName === 'ping') {\r\n  await interaction.reply('pong')\r\n}\r\nif (interaction.commandName === 'echo') {\r\n  const value = interaction.options.getString('value', true) // 引数valueを受け取る\r\n  await interaction.reply(value)\r\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["書けたら",(0,r.jsx)(e.code,{children:"npm start"}),"して、アプリ上でコマンドを使えるかどうか確認してみましょう。"]}),"\n",(0,r.jsx)(e.h2,{children:"遅延応答"}),"\n",(0,r.jsx)(e.p,{children:"「コマンドを受信したら、データベースにアクセスして処理をした後に返信したい」といったケースなど、時間のかかる処理を実装したくなることがあると思います。このような処理をそのまま書いたらどうなるでしょうか？"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"ping"}),'コマンドを次のように編集してみます。ここでは 4000 ミリ秒後に"pong"と返信するコードを書いています。']}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"if (interaction.commandName === 'ping') {\r\n  setTimeout(async () => {\r\n    await interaction.reply('pong')\r\n  }, 4000) // 4000ミリ秒後に\"pong\"と返信\r\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"ping"}),"コマンドを実際に実行してみましょう。すると、",(0,r.jsx)(e.code,{children:"アプリケーションが応答しませんでした"}),"などのメッセージが表示されると思います。"]}),"\n",(0,r.jsxs)(e.p,{children:["実は、スラッシュコマンドは",(0,r.jsx)(e.strong,{children:"3 秒以内に返信しないとエラー"}),"になります。"]}),"\n",(0,r.jsxs)(e.p,{children:["これを回避するため、",(0,r.jsx)(e.code,{children:"deferReply()"}),", ",(0,r.jsx)(e.code,{children:"followUp()"}),"という関数を使います。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"if (interaction.commandName === 'ping') {\r\n  await interaction.deferReply() // 追加\r\n  setTimeout(async () => {\r\n    await interaction.followUp('pong') // 変更\r\n  }, 4000) // 4000ミリ秒後に\"pong\"と返信\r\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["このコードにした上で",(0,r.jsx)(e.code,{children:"ping"}),"コマンドを実行すると、",(0,r.jsx)(e.code,{children:"<bot名>が考え中…"}),"というメッセージが表示された 4 秒後に",(0,r.jsx)(e.code,{children:"pong"}),"と表示されるはずです。意図通りの挙動になりました。"]}),"\n",(0,r.jsxs)(e.p,{children:["ということで、時間のかかる処理を行う時には、返信を遅延させるために",(0,r.jsx)(e.code,{children:"deferReply()"}),"や",(0,r.jsx)(e.code,{children:"followUp()"}),"を使う必要があります。"]}),"\n",(0,r.jsxs)(e.p,{children:["詳しくはこのページが参考になります: ",(0,r.jsx)(e.a,{href:"https://scrapbox.io/discordjs-japan/reply%E3%81%A8deferReply%E3%81%AE%E9%81%95%E3%81%84",children:"reply と deferReply の違い - Discord.js Japan User Group"})]}),"\n",(0,r.jsx)(e.h1,{children:"分からないことがあったら"}),"\n",(0,r.jsx)(e.p,{children:"分からないことがある時は次のサイトが頼りになります。"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://discordjs.guide/#before-you-begin",children:"Discord.js Guide"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://discord.js.org/#/docs/discord.js/stable/general/welcome",children:"discord.js Documentation"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://scrapbox.io/discordjs-japan/",children:"Discord.js Japan User Group (Scrapbox)"})}),"\n",(0,r.jsx)(e.li,{children:"日本語 Wiki。やりたいことをここで検索すれば大体出てくる説があります。"}),"\n"]}),"\n",(0,r.jsx)(e.h1,{children:"おわり"}),"\n",(0,r.jsx)(e.p,{children:"スラッシュコマンドに対応した Discord Bot を作りました。後はいろいろ工夫して頑張ってください(雑)。"})]})}e.default=function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,c.ah)(),n.components);return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(o,n)})):o(n)}},1151:function(n,e,s){"use strict";s.d(e,{ah:function(){return i}});var r=s(7294);let c=r.createContext({});function i(n){let e=r.useContext(c);return r.useMemo(()=>"function"==typeof n?n(e):{...e,...n},[e,n])}}},function(n){n.O(0,[675,774,888,179],function(){return n(n.s=3745)}),_N_E=n.O()}]);